// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc256.Robot1v1;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveBaseSpeedController1;
    public static SpeedController driveBaseSpeedController2;
    public static RobotDrive driveBaseRobotDrive;
    public static DigitalInput sensorsLimitSwitch2;
    public static AnalogGyro sensorsAnalogGyro1;
    public static AnalogAccelerometer sensorsAnalogAccelerometer1;
    public static Encoder sensorsQuadratureEncoder1;
    public static Encoder sensorsQuadratureEncoder2;
    public static DigitalInput sensorsLimitSwitch1;
    public static DigitalInput sensorsDigitalInput1;
    public static DigitalInput sensorsDigitalInput2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBaseSpeedController1 = new Talon(0);
        LiveWindow.addActuator("DriveBase", "Speed Controller 1", (Talon) driveBaseSpeedController1);
        
        driveBaseSpeedController2 = new Talon(1);
        LiveWindow.addActuator("DriveBase", "Speed Controller 2", (Talon) driveBaseSpeedController2);
        
        driveBaseRobotDrive = new RobotDrive(driveBaseSpeedController1, driveBaseSpeedController2);
        
        driveBaseRobotDrive.setSafetyEnabled(true);
        driveBaseRobotDrive.setExpiration(0.1);
        driveBaseRobotDrive.setSensitivity(0.5);
        driveBaseRobotDrive.setMaxOutput(1.0);

        sensorsLimitSwitch2 = new DigitalInput(5);
        LiveWindow.addSensor("Sensors", "Limit Switch 2", sensorsLimitSwitch2);
        
        sensorsAnalogGyro1 = new AnalogGyro(1);
        LiveWindow.addSensor("Sensors", "AnalogGyro 1", sensorsAnalogGyro1);
        sensorsAnalogGyro1.setSensitivity(0.007);
        sensorsAnalogAccelerometer1 = new AnalogAccelerometer(0);
        LiveWindow.addSensor("Sensors", "AnalogAccelerometer 1", sensorsAnalogAccelerometer1);
        sensorsAnalogAccelerometer1.setSensitivity(0.0);
        sensorsAnalogAccelerometer1.setZero(2.5);
        sensorsQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Sensors", "Quadrature Encoder 1", sensorsQuadratureEncoder1);
        sensorsQuadratureEncoder1.setDistancePerPulse(1.0);
        sensorsQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        sensorsQuadratureEncoder2 = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Sensors", "Quadrature Encoder 2", sensorsQuadratureEncoder2);
        sensorsQuadratureEncoder2.setDistancePerPulse(1.0);
        sensorsQuadratureEncoder2.setPIDSourceType(PIDSourceType.kRate);
        sensorsLimitSwitch1 = new DigitalInput(4);
        LiveWindow.addSensor("Sensors", "Limit Switch 1", sensorsLimitSwitch1);
        
        sensorsDigitalInput1 = new DigitalInput(6);
        LiveWindow.addSensor("Sensors", "Digital Input 1", sensorsDigitalInput1);
        
        sensorsDigitalInput2 = new DigitalInput(7);
        LiveWindow.addSensor("Sensors", "Digital Input 2", sensorsDigitalInput2);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
